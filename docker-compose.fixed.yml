services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: backlog_postgres_new
    environment:
      - POSTGRES_USER=backlog_user
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-backlog_super_secure_password_2024}
      - POSTGRES_DB=student_planner
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - postgres_data_new:/var/lib/postgresql/data
      - ./backend/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "5433:5432"
    restart: unless-stopped
    networks:
      - backlog_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U backlog_user -d student_planner"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API
  backend:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    container_name: backlog_backend_new
    environment:
      # Database
      - POSTGRES_USER=backlog_user
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-backlog_super_secure_password_2024}
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=student_planner
      
      # JWT & Security
      - SECRET_KEY=${SECRET_KEY:-super-secret-production-key-change-this-in-env}
      - ACCESS_TOKEN_EXPIRE_MINUTES=1440
      - DEBUG=false
      
      # CORS & URLs
      - BACKEND_CORS_ORIGINS=["https://unl-backlog.duckdns.org", "http://localhost:3001"]
      - FRONTEND_URL=https://unl-backlog.duckdns.org
      - BACKEND_URL=https://unl-backlog.duckdns.org
      
      # VAPID Keys for Push Notifications
      - VAPID_PRIVATE_KEY=-----BEGIN PRIVATE KEY-----\nMIGHAgEAMBMGByqGSM49AgEGCCqGSM49AwEHBG0wawIBAQQguTZYw06dfc8DKWas\n6SGffWI4cZINgWiz3CL/5o4jmG6hRANCAAS/2PxOpMGZC6iRs3S6RtchF+hb2ygQ\nibLtClEuhkp1fsAgm6SJBj3MY8cLErNxWDK6jDYb0KbmlwQ+BV3pQcL3\n-----END PRIVATE KEY-----
      - VAPID_PUBLIC_KEY=BL_Y_E6kwZkLqJGzdLpG1yEX6FvbKBCJsu0KUS6GSnV-wCCbpIkGPcxjxwsSs3FYMrqMNhvQpuaXBD4FXelBwvc
      - VAPID_SUBJECT=mailto:admin@unl-backlog.duckdns.org
      
    volumes:
      - backend_uploads:/app/uploads
    expose:
      - "8000"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - backlog_network
    restart: unless-stopped

  # Frontend
  frontend:
    build: 
      context: ./frontend
      dockerfile: Dockerfile.prod
      args:
        NEXT_PUBLIC_API_URL: https://unl-backlog.duckdns.org
        NEXT_PUBLIC_FRONTEND_URL: https://unl-backlog.duckdns.org
        NEXT_PUBLIC_VAPID_PUBLIC_KEY: BL_Y_E6kwZkLqJGzdLpG1yEX6FvbKBCJsu0KUS6GSnV-wCCbpIkGPcxjxwsSs3FYMrqMNhvQpuaXBD4FXelBwvc
    container_name: backlog_frontend_new
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=https://unl-backlog.duckdns.org
      - NEXT_PUBLIC_FRONTEND_URL=https://unl-backlog.duckdns.org
      - NEXT_PUBLIC_VAPID_PUBLIC_KEY=BL_Y_E6kwZkLqJGzdLpG1yEX6FvbKBCJsu0KUS6GSnV-wCCbpIkGPcxjxwsSs3FYMrqMNhvQpuaXBD4FXelBwvc
    expose:
      - "3000"
    depends_on:
      - backend
    networks:
      - backlog_network
    restart: unless-stopped

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: backlog_nginx_new
    ports:
      - "8080:80"    # HTTP на порту 8080 (вместо 80)
      - "8443:443"   # HTTPS на порту 8443 (вместо 443)
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - certbot_conf:/etc/letsencrypt:ro
      - certbot_www:/var/www/certbot:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - frontend
      - backend
    networks:
      - backlog_network
    restart: unless-stopped
    command: "/bin/sh -c 'while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g \"daemon off;\"'"

  # Certbot for SSL certificates
  certbot:
    image: certbot/certbot
    container_name: backlog_certbot_new
    volumes:
      - certbot_conf:/etc/letsencrypt
      - certbot_www:/var/www/certbot
      - certbot_logs:/var/log/letsencrypt
    networks:
      - backlog_network
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"

volumes:
  postgres_data_new:
    driver: local
  backend_uploads:
    driver: local
  certbot_conf:
    driver: local
  certbot_www:
    driver: local
  certbot_logs:
    driver: local
  nginx_logs:
    driver: local

networks:
  backlog_network:
    driver: bridge 