version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: backlog_postgres
    environment:
      - POSTGRES_USER=backlog_user
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-backlog_super_secure_password_2024}
      - POSTGRES_DB=student_planner
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "5433:5432"
    restart: unless-stopped
    networks:
      - backlog_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U backlog_user -d student_planner"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API
  backend:
    build: ./backend
    container_name: backlog_backend
    environment:
      # Database
      - POSTGRES_USER=backlog_user
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-backlog_super_secure_password_2024}
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=student_planner
      
      # JWT & Security
      - SECRET_KEY=${SECRET_KEY:-super-secret-dev-key-change-this}
      - ACCESS_TOKEN_EXPIRE_MINUTES=1440
      - DEBUG=true
      
      # CORS & URLs (для разработки)
      - BACKEND_CORS_ORIGINS=["http://localhost:3000", "http://localhost:3001"]
      - FRONTEND_URL=http://localhost:3000
      - BACKEND_URL=http://localhost:8000
      
      # VAPID Keys for Push Notifications - сгенерированы на сервере
      - VAPID_PRIVATE_KEY=-----BEGIN PRIVATE KEY-----\nMIGHAgEAMBMGByqGSM49AgEGCCqGSM49AwEHBG0wawIBAQQgscxeFYgIMyVVpVuW\nwCq3FxSMJugzx0hDZTF3sO3W46+hRANCAAR0FzNrgl/hkUbQboUJDLfgPf6xG549\nD/6qFk22Cou4GhrNM3g/Hn1Ns0pFXex6n8BQvAPjv25dIz9jcK3ZtDvL\n-----END PRIVATE KEY-----
      - VAPID_PUBLIC_KEY=BHQXM2uCX-GRRtBuhQkMt-A9_rEbnj0P_qoWTbYKi7gaGs0zeD8efU2zSkVd7HqfwFC8A-O_bl0jP2Nwrdm0O8s
      - VAPID_SUBJECT=mailto:admin@localhost
      
    volumes:
      - ./backend/uploads:/app/uploads
    ports:
      - "8010:8000"  # Прямое подключение для разработки
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - backlog_network
    restart: unless-stopped

  # Frontend
  frontend:
    build: 
      context: ./frontend
      dockerfile: Dockerfile.prod
      args:
        NEXT_PUBLIC_API_URL: http://localhost:8000
        NEXT_PUBLIC_FRONTEND_URL: http://localhost:3000
        NEXT_PUBLIC_VAPID_PUBLIC_KEY: BHQXM2uCX-GRRtBuhQkMt-A9_rEbnj0P_qoWTbYKi7gaGs0zeD8efU2zSkVd7HqfwFC8A-O_bl0jP2Nwrdm0O8s
    container_name: backlog_frontend
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=http://localhost:8000
      - NEXT_PUBLIC_FRONTEND_URL=http://localhost:3000
      - NEXT_PUBLIC_VAPID_PUBLIC_KEY=BHQXM2uCX-GRRtBuhQkMt-A9_rEbnj0P_qoWTbYKi7gaGs0zeD8efU2zSkVd7HqfwFC8A-O_bl0jP2Nwrdm0O8s
    ports:
      - "3010:3000"
    depends_on:
      - backend
    networks:
      - backlog_network
    restart: unless-stopped

volumes:
  postgres_data:

networks:
  backlog_network:
    driver: bridge 