#!/usr/bin/env python3
"""
–ì–µ–Ω–µ—Ä–∞—Ü–∏—è VAPID –∫–ª—é—á–µ–π –≤–Ω—É—Ç—Ä–∏ backend –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
–ó–∞–ø—É—Å–∫: docker exec backlog_backend python generate_server_vapid.py
"""

import sys
import os
import json

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é
sys.path.append('/app')

try:
    from pywebpush import webpush
    from cryptography.hazmat.primitives import serialization
    from cryptography.hazmat.primitives.asymmetric import ec
    import base64
    
    print("üîÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è VAPID –∫–ª—é—á–µ–π –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ...")
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á
    private_key = ec.generate_private_key(ec.SECP256R1())
    
    # –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –≤ PEM —Ñ–æ—Ä–º–∞—Ç–µ
    private_pem = private_key.private_bytes(
        encoding=serialization.Encoding.PEM,
        format=serialization.PrivateFormat.PKCS8,
        encryption_algorithm=serialization.NoEncryption()
    ).decode('utf-8')
    
    # –ü—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á –≤ –Ω–µ—Å–∂–∞—Ç–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
    public_key = private_key.public_key()
    public_numbers = public_key.public_numbers()
    x_bytes = public_numbers.x.to_bytes(32, 'big')
    y_bytes = public_numbers.y.to_bytes(32, 'big')
    public_key_bytes = b'\x04' + x_bytes + y_bytes
    public_key_b64 = base64.urlsafe_b64encode(public_key_bytes).decode('ascii').rstrip('=')
    
    print("‚úÖ VAPID –∫–ª—é—á–∏ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ!")
    print("=" * 70)
    print("–ü–†–ò–í–ê–¢–ù–´–ô –ö–õ–Æ–ß:")
    print(private_pem)
    print(f"–ü–£–ë–õ–ò–ß–ù–´–ô –ö–õ–Æ–ß: {public_key_b64}")
    print("=" * 70)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–ª—é—á–∏ —Å pywebpush
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª—é—á–µ–π —Å pywebpush...")
    try:
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É
        test_subscription = {
            "endpoint": "https://fcm.googleapis.com/fcm/send/test",
            "keys": {
                "p256dh": "test",
                "auth": "test"
            }
        }
        
        # –ü—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å webpush –æ–±—ä–µ–∫—Ç - –ù–ï –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º, —Ç–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç
        from py_vapid import Vapid
        vapid = Vapid.from_string(private_key=private_pem)
        print("‚úÖ –ö–ª—é—á–∏ —Å–æ–≤–º–µ—Å—Ç–∏–º—ã —Å pywebpush!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
    keys_data = {
        "private_key": private_pem,
        "public_key": public_key_b64,
        "generated_on_server": True,
        "instructions": {
            "docker_compose": f"VAPID_PRIVATE_KEY={private_pem.replace(chr(10), '\\n')}",
            "frontend_env": f"NEXT_PUBLIC_VAPID_PUBLIC_KEY={public_key_b64}"
        }
    }
    
    with open('/app/vapid_keys.json', 'w') as f:
        json.dump(keys_data, f, indent=2)
    
    print(f"\nüíæ –ö–ª—é—á–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ /app/vapid_keys.json")
    print(f"\nüìù –î–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è docker-compose.yml:")
    print(f"VAPID_PRIVATE_KEY={private_pem.replace(chr(10), '\\n')}")
    print(f"VAPID_PUBLIC_KEY={public_key_b64}")
    
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    print("–£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ")
except Exception as e:
    print(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞: {e}")
    import traceback
    traceback.print_exc() 