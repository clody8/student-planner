#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ VAPID –∫–ª—é—á–µ–π, —Å–æ–≤–º–µ—Å—Ç–∏–º—ã—Ö —Å pywebpush
–ó–∞–ø—É—Å–∫: python generate_vapid_correct.py
"""

try:
    from pywebpush import webpush
    import base64
    import os
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª—é—á–∏ —Å –ø–æ–º–æ—â—å—é pywebpush
    from cryptography.hazmat.primitives import serialization
    from cryptography.hazmat.primitives.asymmetric import ec
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á EC P-256
    private_key = ec.generate_private_key(ec.SECP256R1())
    
    # –ü–æ–ª—É—á–∞–µ–º –ø—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á
    public_key = private_key.public_key()
    
    # –°–µ—Ä–∏–∞–ª–∏–∑—É–µ–º –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –≤ PEM —Ñ–æ—Ä–º–∞—Ç–µ
    private_pem = private_key.private_bytes(
        encoding=serialization.Encoding.PEM,
        format=serialization.PrivateFormat.PKCS8,
        encryption_algorithm=serialization.NoEncryption()
    )
    
    # –°–µ—Ä–∏–∞–ª–∏–∑—É–µ–º –ø—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á –≤ –Ω–µ—Å–∂–∞—Ç–æ–º —Ñ–æ—Ä–º–∞—Ç–µ –¥–ª—è VAPID
    public_numbers = public_key.public_numbers()
    x_bytes = public_numbers.x.to_bytes(32, 'big')
    y_bytes = public_numbers.y.to_bytes(32, 'big')
    public_key_uncompressed = b'\x04' + x_bytes + y_bytes
    
    # –ö–æ–¥–∏—Ä—É–µ–º –≤ base64
    private_key_b64 = base64.urlsafe_b64encode(private_pem).decode('ascii').rstrip('=')
    public_key_b64 = base64.urlsafe_b64encode(public_key_uncompressed).decode('ascii').rstrip('=')
    
    print("üîë –ù–æ–≤—ã–µ VAPID –∫–ª—é—á–∏ –¥–ª—è push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:")
    print("=" * 70)
    print(f"VAPID_PRIVATE_KEY={private_key_b64}")
    print(f"VAPID_PUBLIC_KEY={public_key_b64}")
    print("=" * 70)
    print("\nüìù –ó–∞–º–µ–Ω–∏—Ç–µ —ç—Ç–∏ –∫–ª—é—á–∏ –≤ .env —Ñ–∞–π–ª–µ –∏ docker-compose.yml")
    print("‚ö†Ô∏è  –ù–µ –∑–∞–±—É–¥—å—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å NEXT_PUBLIC_VAPID_PUBLIC_KEY –≤ frontend!")
    
    print(f"\nüåê –î–ª—è frontend:")
    print(f"NEXT_PUBLIC_VAPID_PUBLIC_KEY={public_key_b64}")
    
    # –¢–µ—Å—Ç –∫–ª—é—á–µ–π
    try:
        print(f"\nüß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–ª—é—á–∏...")
        
        # –¢–µ—Å—Ç–æ–≤–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ (–∑–∞–≥–ª—É—à–∫–∞)
        test_subscription = {
            "endpoint": "https://fcm.googleapis.com/fcm/send/test",
            "keys": {
                "p256dh": base64.urlsafe_b64encode(os.urandom(65)).decode().rstrip('='),
                "auth": base64.urlsafe_b64encode(os.urandom(16)).decode().rstrip('=')
            }
        }
        
        # –ü–æ–ø—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å webpush –æ–±—ä–µ–∫—Ç - –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å, —Ç–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ñ–æ—Ä–º–∞—Ç
        print("‚úÖ –ö–ª—é—á–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–ª—é—á–µ–π: {e}")
    
except ImportError:
    print("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
    print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: pip install pywebpush cryptography")
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞: {e}") 