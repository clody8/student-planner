#!/usr/bin/env python3
"""
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ VAPID –∫–ª—é—á–µ–π –¥–ª—è push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
"""

import subprocess
import sys

try:
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—É –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ VAPID –∫–ª—é—á–µ–π —á–µ—Ä–µ–∑ Docker
    print("üîÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤—ã—Ö VAPID –∫–ª—é—á–µ–π...")
    
    result = subprocess.run([
        'docker', 'exec', 'backlog_backend', 'python', '-c', '''
from py_vapid import Vapid
import base64

# –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ –∫–ª—é—á–∏
vapid = Vapid()
vapid.generate_keys()

# –ü–æ–ª—É—á–∞–µ–º –∫–ª—é—á–∏ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
private_key_pem = vapid.private_key.private_bytes(
    encoding=serialization.Encoding.PEM,
    format=serialization.PrivateFormat.PKCS8,
    encryption_algorithm=serialization.NoEncryption()
).decode("utf-8")

# –ü—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á –≤ base64url –±–µ–∑ padding
public_key_b64 = vapid.public_key

print("üîë –ù–æ–≤—ã–µ VAPID –∫–ª—é—á–∏:")
print("=" * 60)
print(f"PRIVATE_KEY_PEM:")
print(private_key_pem)
print(f"PUBLIC_KEY: {public_key_b64}")
print("=" * 60)
'''
    ], capture_output=True, text=True)
    
    if result.returncode == 0:
        print(result.stdout)
    else:
        print("‚ùå –û—à–∏–±–∫–∞ —á–µ—Ä–µ–∑ Docker, –ø—Ä–æ–±—É–µ–º –ª–æ–∫–∞–ª—å–Ω–æ...")
        print(result.stderr)
        
        # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± –±–µ–∑ Docker
        print("\nüîÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–µ–π –ª–æ–∫–∞–ª—å–Ω–æ...")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ cryptography
        from cryptography.hazmat.primitives import serialization
        from cryptography.hazmat.primitives.asymmetric import ec
        import base64
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á
        private_key = ec.generate_private_key(ec.SECP256R1())
        
        # –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –≤ PEM —Ñ–æ—Ä–º–∞—Ç–µ
        private_pem = private_key.private_bytes(
            encoding=serialization.Encoding.PEM,
            format=serialization.PrivateFormat.PKCS8,
            encryption_algorithm=serialization.NoEncryption()
        ).decode('utf-8')
        
        # –ü—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á –≤ –Ω–µ—Å–∂–∞—Ç–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
        public_key = private_key.public_key()
        public_numbers = public_key.public_numbers()
        x_bytes = public_numbers.x.to_bytes(32, 'big')
        y_bytes = public_numbers.y.to_bytes(32, 'big')
        public_key_bytes = b'\x04' + x_bytes + y_bytes
        public_key_b64 = base64.urlsafe_b64encode(public_key_bytes).decode('ascii').rstrip('=')
        
        print("üîë –ù–æ–≤—ã–µ VAPID –∫–ª—é—á–∏ (–ª–æ–∫–∞–ª—å–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è):")
        print("=" * 70)
        print("VAPID_PRIVATE_KEY:")
        print(private_pem)
        print(f"VAPID_PUBLIC_KEY: {public_key_b64}")
        print("=" * 70)
        print("\nüìù –û–±–Ω–æ–≤–∏—Ç–µ docker-compose.yml —Å —ç—Ç–∏–º–∏ –∫–ª—é—á–∞–º–∏")
        print("‚ö†Ô∏è  –ó–∞–º–µ–Ω–∏—Ç–µ \\n –Ω–∞ –Ω–∞—Å—Ç–æ—è—â–∏–µ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫ –≤ docker-compose.yml")
        
        # –¢–∞–∫–∂–µ –¥–ª—è frontend
        print(f"\nüåê –î–ª—è frontend (.env.local):")
        print(f"NEXT_PUBLIC_VAPID_PUBLIC_KEY={public_key_b64}")
        
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    import traceback
    traceback.print_exc() 