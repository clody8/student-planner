#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ VAPID –∫–ª—é—á–µ–π –¥–ª—è push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
–ó–∞–ø—É—Å–∫: python generate_vapid_keys.py
"""

try:
    from pywebpush import webpush
    from cryptography.hazmat.primitives import serialization
    from cryptography.hazmat.primitives.asymmetric import ec
    import base64
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª—é—á–∏ EC P-256
    private_key = ec.generate_private_key(ec.SECP256R1())
    public_key = private_key.public_key()
    
    # –°–µ—Ä–∏–∞–ª–∏–∑—É–µ–º –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –≤ PEM —Ñ–æ—Ä–º–∞—Ç–µ
    private_pem = private_key.private_bytes(
        encoding=serialization.Encoding.PEM,
        format=serialization.PrivateFormat.PKCS8,
        encryption_algorithm=serialization.NoEncryption()
    )
    private_key_b64 = base64.urlsafe_b64encode(private_pem).decode('ascii').rstrip('=')
    
    # –°–µ—Ä–∏–∞–ª–∏–∑—É–µ–º –ø—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á
    public_raw = public_key.public_numbers().x.to_bytes(32, 'big') + \
                 public_key.public_numbers().y.to_bytes(32, 'big')
    public_key_b64 = base64.urlsafe_b64encode(b'\x04' + public_raw).decode('ascii').rstrip('=')
    
    print("üîë VAPID –∫–ª—é—á–∏ –¥–ª—è push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:")
    print("=" * 50)
    print(f"VAPID_PRIVATE_KEY={private_key_b64}")
    print(f"VAPID_PUBLIC_KEY={public_key_b64}")
    print("=" * 50)
    print("\nüìù –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–∏ –∫–ª—é—á–∏ –≤ –≤–∞—à .env —Ñ–∞–π–ª")
    print("‚ö†Ô∏è  –•—Ä–∞–Ω–∏—Ç–µ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏!")
    
    # –¢–∞–∫–∂–µ –≤—ã–≤–æ–¥–∏–º –¥–ª—è frontend
    print(f"\nüåê –î–ª—è frontend (components/PushNotifications.tsx):")
    print(f"const VAPID_PUBLIC_KEY = '{public_key_b64}';")
    
except ImportError:
    print("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
    print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: pip install pywebpush cryptography")
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª—é—á–µ–π: {e}") 