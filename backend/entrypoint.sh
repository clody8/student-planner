#!/bin/bash

set -e

echo "üöÄ –ó–∞–ø—É—Å–∫ —Å—Ç—É–¥–µ–Ω—á–µ—Å–∫–æ–≥–æ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞..."

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
wait_for_db() {
    echo "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö..."
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º Python –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Å —Ç–µ–º–∏ –∂–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏, —á—Ç–æ –∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    until python -c "
import os
import psycopg2
import time

host = os.environ.get('POSTGRES_HOST', 'postgres')
port = os.environ.get('POSTGRES_PORT', '5432')
user = os.environ.get('POSTGRES_USER', 'backlog_user')
password = os.environ.get('POSTGRES_PASSWORD', 'backlog_super_secure_password_2024')
database = os.environ.get('POSTGRES_DB', 'student_planner')

try:
    conn = psycopg2.connect(
        host=host,
        port=port,
        user=user,
        password=password,
        database=database,
        connect_timeout=5
    )
    conn.close()
    print(f'‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è –∫ {host}:{port}')
    exit(0)
except Exception as e:
    print(f'‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ {host}:{port}: {e}')
    exit(1)
" 2>/dev/null; do
        echo "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –æ–∂–∏–¥–∞–Ω–∏–µ..."
        sleep 2
    done
    echo "‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–æ—Å—Ç—É–ø–Ω–∞"
}


# –û–∂–∏–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
wait_for_db

# –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π
echo "üìä –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö..."
echo "üîç Database configuration:"
echo "  POSTGRES_HOST: $POSTGRES_HOST"
echo "  POSTGRES_PORT: $POSTGRES_PORT"
echo "  POSTGRES_USER: $POSTGRES_USER"
echo "  POSTGRES_DB: $POSTGRES_DB"
alembic upgrade head

# –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
echo "üå± –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏..."
python -c "
import sys
sys.path.append('/app')

try:
    from sqlalchemy.orm import Session
    from app.db.session import SessionLocal
    from app.crud import user as crud_user
    from app.schemas.user import UserCreate
    from app.db.models.user import User
    from app.db.models.task import Task, TaskStep, TaskType, TaskPriority, TaskStatus
    from datetime import datetime, timedelta
    import random
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏
    db = SessionLocal()
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
        existing_user = db.query(User).first()
        if not existing_user:
            print('–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...')
            test_user = UserCreate(
                email='test@example.com',
                password='password123',
                full_name='–¢–µ—Å—Ç–æ–≤—ã–π –°—Ç—É–¥–µ–Ω—Ç'
            )
            user = crud_user.create_user(db=db, user=test_user)
            print('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω: test@example.com / password123')
        else:
            user = existing_user
            print('üîÑ –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∑–∞–¥–∞—á–∏
        existing_tasks = db.query(Task).filter(Task.user_id == user.id).count()
        if existing_tasks == 0:
            print('–°–æ–∑–¥–∞–Ω–∏–µ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á...')
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∑–∞–¥–∞—á
            colors = {
                TaskType.coursework: '#8B5CF6',     # —Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π
                TaskType.exam: '#EF4444',           # –∫—Ä–∞—Å–Ω—ã–π
                TaskType.laboratory: '#10B981',     # –∑–µ–ª–µ–Ω—ã–π
                TaskType.lecture: '#3B82F6',        # —Å–∏–Ω–∏–π
                TaskType.seminar: '#F59E0B',        # –∂–µ–ª—Ç—ã–π
                TaskType.project: '#EC4899',        # —Ä–æ–∑–æ–≤—ã–π
                TaskType.homework: '#6B7280',       # —Å–µ—Ä—ã–π
                TaskType.other: '#14B8A6'           # –±–∏—Ä—é–∑–æ–≤—ã–π
            }
            
            # –°–æ–∑–¥–∞–µ–º —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–µ –∑–∞–¥–∞—á–∏
            mock_tasks = [
                {
                    'title': '–ö—É—Ä—Å–æ–≤–∞—è —Ä–∞–±–æ—Ç–∞ –ø–æ –±–∞–∑–∞–º –¥–∞–Ω–Ω—ã—Ö',
                    'description': '–†–∞–∑—Ä–∞–±–æ—Ç–∞—Ç—å —Å–∏—Å—Ç–µ–º—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∏–±–ª–∏–æ—Ç–µ–∫–æ–π —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º PostgreSQL. –í–∫–ª—é—á–∞–µ—Ç –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ö–µ–º—ã –ë–î, —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –∏ –Ω–∞–ø–∏—Å–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤.',
                    'task_type': TaskType.coursework,
                    'priority': TaskPriority.yearly_debt,
                    'status': TaskStatus.in_progress,
                    'deadline': datetime.now() + timedelta(days=45),
                    'steps': [
                        {'title': '–ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π', 'description': '–ò–∑—É—á–∏—Ç—å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ –∏ –≤—ã–¥–µ–ª–∏—Ç—å –æ—Å–Ω–æ–≤–Ω—ã–µ —Å—É—â–Ω–æ—Å—Ç–∏', 'is_completed': True, 'order': 1},
                        {'title': '–ü—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ö–µ–º—ã –ë–î', 'description': '–°–æ–∑–¥–∞—Ç—å ER-–¥–∏–∞–≥—Ä–∞–º–º—É –∏ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞—Ç—å —Ç–∞–±–ª–∏—Ü—ã', 'is_completed': True, 'order': 2},
                        {'title': '–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü', 'description': '–ù–∞–ø–∏—Å–∞—Ç—å SQL-—Å–∫—Ä–∏–ø—Ç—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ë–î', 'is_completed': False, 'order': 3},
                        {'title': '–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è', 'description': '–°–æ–∑–¥–∞—Ç—å –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏', 'is_completed': False, 'order': 4},
                        {'title': '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –æ—Ç–ª–∞–¥–∫–∞', 'description': '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç—ã –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π', 'is_completed': False, 'order': 5},
                        {'title': '–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏', 'description': '–ù–∞–ø–∏—Å–∞—Ç—å –ø–æ—è—Å–Ω–∏—Ç–µ–ª—å–Ω—É—é –∑–∞–ø–∏—Å–∫—É –∏ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', 'is_completed': False, 'order': 6}
                    ]
                },
                {
                    'title': '–≠–∫–∑–∞–º–µ–Ω –ø–æ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–º—É –∞–Ω–∞–ª–∏–∑—É',
                    'description': '–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —ç–∫–∑–∞–º–µ–Ω—É: –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ —Ç–µ–æ—Ä–∏–∏ –ø—Ä–µ–¥–µ–ª–æ–≤, –ø—Ä–æ–∏–∑–≤–æ–¥–Ω—ã—Ö, –∏–Ω—Ç–µ–≥—Ä–∞–ª–æ–≤ –∏ –¥–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö —É—Ä–∞–≤–Ω–µ–Ω–∏–π.',
                    'task_type': TaskType.exam,
                    'priority': TaskPriority.semester_debt,
                    'status': TaskStatus.pending,
                    'deadline': datetime.now() + timedelta(days=12),
                    'steps': [
                        {'title': '–¢–µ–æ—Ä–∏—è –ø—Ä–µ–¥–µ–ª–æ–≤', 'description': '–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∏ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ–æ—Ä–µ–º—ã –æ –ø—Ä–µ–¥–µ–ª–∞—Ö', 'is_completed': False, 'order': 1},
                        {'title': '–ü—Ä–æ–∏–∑–≤–æ–¥–Ω—ã–µ –∏ –¥–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏—Ä–æ–≤–∞–Ω–∏–µ', 'description': '–ò–∑—É—á–∏—Ç—å –ø—Ä–∞–≤–∏–ª–∞ –¥–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –∏—Ö –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ', 'is_completed': False, 'order': 2},
                        {'title': '–ò–Ω—Ç–µ–≥—Ä–∞–ª—ã', 'description': '–ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –∏–Ω—Ç–µ–≥—Ä–∞–ª—ã, –º–µ—Ç–æ–¥—ã –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–∏—è', 'is_completed': False, 'order': 3},
                        {'title': '–î–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ —É—Ä–∞–≤–Ω–µ–Ω–∏—è', 'description': '–û—Å–Ω–æ–≤–Ω—ã–µ —Ç–∏–ø—ã –î–£ –∏ –º–µ—Ç–æ–¥—ã –∏—Ö —Ä–µ—à–µ–Ω–∏—è', 'is_completed': False, 'order': 4},
                        {'title': '–†–µ—à–µ–Ω–∏–µ –∑–∞–¥–∞—á', 'description': '–ü—Ä–æ—Ä–∞–±–æ—Ç–∞—Ç—å —Ç–∏–ø–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ –∏–∑ —ç–∫–∑–∞–º–µ–Ω–∞—Ü–∏–æ–Ω–Ω—ã—Ö –±–∏–ª–µ—Ç–æ–≤', 'is_completed': False, 'order': 5}
                    ]
                },
                {
                    'title': '–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞—è —Ä–∞–±–æ—Ç–∞ ‚Ññ3 –ø–æ —Ñ–∏–∑–∏–∫–µ',
                    'description': '–ò–∑—É—á–µ–Ω–∏–µ –∑–∞–∫–æ–Ω–æ–≤ –æ–ø—Ç–∏–∫–∏: –∏–∑–º–µ—Ä–µ–Ω–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è –ø—Ä–µ–ª–æ–º–ª–µ–Ω–∏—è —Å—Ç–µ–∫–ª–∞ –∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ñ–æ–∫—É—Å–Ω–æ–≥–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –ª–∏–Ω–∑—ã.',
                    'task_type': TaskType.laboratory,
                    'priority': TaskPriority.current,
                    'status': TaskStatus.completed,
                    'deadline': datetime.now() - timedelta(days=3),
                    'completed_at': datetime.now() - timedelta(days=1),
                    'steps': [
                        {'title': '–ò–∑—É—á–µ–Ω–∏–µ —Ç–µ–æ—Ä–∏–∏', 'description': '–ü—Ä–æ—á–∏—Ç–∞—Ç—å –º–µ—Ç–æ–¥–∏—á–µ—Å–∫–∏–µ —É–∫–∞–∑–∞–Ω–∏—è –∫ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–æ–π —Ä–∞–±–æ—Ç–µ', 'is_completed': True, 'order': 1},
                        {'title': '–ü—Ä–æ–≤–µ–¥–µ–Ω–∏–µ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞', 'description': '–í—ã–ø–æ–ª–Ω–∏—Ç—å –∏–∑–º–µ—Ä–µ–Ω–∏—è –≤ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏', 'is_completed': True, 'order': 2},
                        {'title': '–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤', 'description': '–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç–∏ –∏ –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫–∏', 'is_completed': True, 'order': 3},
                        {'title': '–ù–∞–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞', 'description': '–û—Ñ–æ—Ä–º–∏—Ç—å –æ—Ç—á–µ—Ç —Å–æ–≥–ª–∞—Å–Ω–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º', 'is_completed': True, 'order': 4}
                    ]
                },
                {
                    'title': '–ü—Ä–æ–µ–∫—Ç –ø–æ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –º–æ–±–∏–ª—å–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è',
                    'description': '–ö–æ–º–∞–Ω–¥–Ω—ã–π –ø—Ä–æ–µ–∫—Ç –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é –º–æ–±–∏–ª—å–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞—á —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º React Native.',
                    'task_type': TaskType.project,
                    'priority': TaskPriority.current,
                    'status': TaskStatus.in_progress,
                    'deadline': datetime.now() + timedelta(days=30),
                    'steps': [
                        {'title': '–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã', 'description': '–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏ –∏—Ö –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ', 'is_completed': True, 'order': 1},
                        {'title': '–î–∏–∑–∞–π–Ω –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞', 'description': '–°–æ–∑–¥–∞—Ç—å –º–∞–∫–µ—Ç—ã —ç–∫—Ä–∞–Ω–æ–≤ –≤ Figma', 'is_completed': True, 'order': 2},
                        {'title': '–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞', 'description': '–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å React Native –ø—Ä–æ–µ–∫—Ç –∏ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏', 'is_completed': True, 'order': 3},
                        {'title': '–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö —ç–∫—Ä–∞–Ω–æ–≤', 'description': '–†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω –∏ —ç–∫—Ä–∞–Ω —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á', 'is_completed': False, 'order': 4},
                        {'title': '–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å API', 'description': '–ü–æ–¥–∫–ª—é—á–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä–Ω–æ–π —á–∞—Å—Ç–∏', 'is_completed': False, 'order': 5},
                        {'title': '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ', 'description': '–ü—Ä–æ–≤–µ—Å—Ç–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö', 'is_completed': False, 'order': 6}
                    ]
                },
                {
                    'title': '–î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—é',
                    'description': '–†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∞–ª–≥–æ—Ä–∏—Ç–º—ã —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ (–±—ã—Å—Ç—Ä–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞, —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Å–ª–∏—è–Ω–∏–µ–º) –Ω–∞ —è–∑—ã–∫–µ Python —Å –∞–Ω–∞–ª–∏–∑–æ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏.',
                    'task_type': TaskType.homework,
                    'priority': TaskPriority.current,
                    'status': TaskStatus.pending,
                    'deadline': datetime.now() + timedelta(days=5),
                    'steps': [
                        {'title': '–ò–∑—É—á–µ–Ω–∏–µ –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤', 'description': '–†–∞–∑–æ–±—Ä–∞—Ç—å –ø—Ä–∏–Ω—Ü–∏–ø—ã —Ä–∞–±–æ—Ç—ã –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏', 'is_completed': False, 'order': 1},
                        {'title': '–†–µ–∞–ª–∏–∑–∞—Ü–∏—è –±—ã—Å—Ç—Ä–æ–π —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏', 'description': '–ù–∞–ø–∏—Å–∞—Ç—å –∫–æ–¥ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ QuickSort', 'is_completed': False, 'order': 2},
                        {'title': '–†–µ–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ —Å–ª–∏—è–Ω–∏–µ–º', 'description': '–ù–∞–ø–∏—Å–∞—Ç—å –∫–æ–¥ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ MergeSort', 'is_completed': False, 'order': 3},
                        {'title': '–ê–Ω–∞–ª–∏–∑ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏', 'description': '–ü—Ä–æ–≤–µ—Å—Ç–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∞–Ω–∞–ª–∏–∑ –∏ —Å—Ä–∞–≤–Ω–∏—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å', 'is_completed': False, 'order': 4}
                    ]
                },
                {
                    'title': '–°–µ–º–∏–Ω–∞—Ä –ø–æ –º–∏–∫—Ä–æ—ç–∫–æ–Ω–æ–º–∏–∫–µ',
                    'description': '–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —Å–µ–º–∏–Ω–∞—Ä—É: –∏–∑—É—á–µ–Ω–∏–µ —Ç–µ–æ—Ä–∏–∏ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤—ã–±–æ—Ä–∞ –∏ —Ä—ã–Ω–æ—á–Ω–æ–≥–æ —Ä–∞–≤–Ω–æ–≤–µ—Å–∏—è.',
                    'task_type': TaskType.seminar,
                    'priority': TaskPriority.current,
                    'status': TaskStatus.pending,
                    'deadline': datetime.now() + timedelta(days=2),
                    'steps': [
                        {'title': '–ü—Ä–æ—á–∏—Ç–∞—Ç—å –≥–ª–∞–≤—ã —É—á–µ–±–Ω–∏–∫–∞', 'description': '–ò–∑—É—á–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª –ø–æ —Ç–µ–æ—Ä–∏–∏ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è', 'is_completed': False, 'order': 1},
                        {'title': '–†–µ—à–∏—Ç—å –∑–∞–¥–∞—á–∏', 'description': '–ü—Ä–æ—Ä–∞–±–æ—Ç–∞—Ç—å —Ç–∏–ø–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ –Ω–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é', 'is_completed': False, 'order': 2},
                        {'title': '–ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å—ã', 'description': '–°—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è', 'is_completed': False, 'order': 3}
                    ]
                },
                {
                    'title': '–õ–µ–∫—Ü–∏—è –ø–æ –∏—Å—Ç–æ—Ä–∏–∏ –†–æ—Å—Å–∏–∏',
                    'description': '–ü–æ—Å–µ—â–µ–Ω–∏–µ –ª–µ–∫—Ü–∏–∏ –∏ –≤–µ–¥–µ–Ω–∏–µ –∫–æ–Ω—Å–ø–µ–∫—Ç–∞ –ø–æ —Ç–µ–º–µ \"–†–µ—Ñ–æ—Ä–º—ã –ü–µ—Ç—Ä–∞ I –∏ –∏—Ö –≤–ª–∏—è–Ω–∏–µ –Ω–∞ —Ä–∞–∑–≤–∏—Ç–∏–µ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–∞\".',
                    'task_type': TaskType.lecture,
                    'priority': TaskPriority.current,
                    'status': TaskStatus.completed,
                    'deadline': datetime.now() - timedelta(days=1),
                    'completed_at': datetime.now() - timedelta(days=1),
                    'steps': [
                        {'title': '–ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ –ª–µ–∫—Ü–∏–∏', 'description': '–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∏–π –º–∞—Ç–µ—Ä–∏–∞–ª', 'is_completed': True, 'order': 1},
                        {'title': '–ü–æ—Å–µ—Ç–∏—Ç—å –ª–µ–∫—Ü–∏—é', 'description': '–ü—Ä–∏—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –Ω–∞ –ª–µ–∫—Ü–∏–∏ –∏ –≤–µ—Å—Ç–∏ –∑–∞–ø–∏—Å–∏', 'is_completed': True, 'order': 2},
                        {'title': '–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ–Ω—Å–ø–µ–∫—Ç', 'description': '–î–æ–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø–∏—Å–∏ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª', 'is_completed': True, 'order': 3}
                    ]
                },
                {
                    'title': '–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏ –ø–æ –ò–ò',
                    'description': '–ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –¥–æ–∫–ª–∞–¥ –¥–ª—è —Å—Ç—É–¥–µ–Ω—á–µ—Å–∫–æ–π –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏ –ø–æ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–º—É –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É –Ω–∞ —Ç–µ–º—É \"–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –≤ –º–µ–¥–∏—Ü–∏–Ω–µ\".',
                    'task_type': TaskType.other,
                    'priority': TaskPriority.current,
                    'status': TaskStatus.pending,
                    'deadline': datetime.now() + timedelta(days=20),
                    'steps': [
                        {'title': '–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ —Ç–µ–º—ã', 'description': '–ò–∑—É—á–∏—Ç—å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–∞–±–æ—Ç—ã –ø–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—é –ò–ò –≤ –º–µ–¥–∏—Ü–∏–Ω–µ', 'is_completed': False, 'order': 1},
                        {'title': '–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–æ–∫–ª–∞–¥–∞', 'description': '–°–æ—Å—Ç–∞–≤–∏—Ç—å –ø–ª–∞–Ω –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏', 'is_completed': False, 'order': 2},
                        {'title': '–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏', 'description': '–ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å —Å–ª–∞–π–¥—ã –≤ PowerPoint', 'is_completed': False, 'order': 3},
                        {'title': '–†–µ–ø–µ—Ç–∏—Ü–∏—è', 'description': '–û—Ç—Ä–µ–ø–µ—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏–µ', 'is_completed': False, 'order': 4}
                    ]
                }
            ]
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            for task_data in mock_tasks:
                # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É
                db_task = Task(
                    user_id=user.id,
                    title=task_data['title'],
                    description=task_data['description'],
                    task_type=task_data['task_type'],
                    priority=task_data['priority'],
                    status=task_data['status'],
                    deadline=task_data['deadline'],
                    completed_at=task_data.get('completed_at'),
                    color=colors.get(task_data['task_type'], '#3B82F6')
                )
                db.add(db_task)
                db.commit()
                db.refresh(db_task)
                
                # –°–æ–∑–¥–∞–µ–º —ç—Ç–∞–ø—ã –∑–∞–¥–∞—á–∏
                for step_data in task_data['steps']:
                    db_step = TaskStep(
                        task_id=db_task.id,
                        title=step_data['title'],
                        description=step_data['description'],
                        is_completed=step_data['is_completed'],
                        order=step_data['order'],
                        completed_at=datetime.now() if step_data['is_completed'] else None
                    )
                    db.add(db_step)
                
                db.commit()
                print(f'  ‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∑–∞–¥–∞—á–∞: {task_data[\"title\"]}')
            
            print(f'‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(mock_tasks)} –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á —Å —ç—Ç–∞–ø–∞–º–∏')
        else:
            print(f'üîÑ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç ({existing_tasks} —à—Ç.)')
            
        # –°–æ–∑–¥–∞–µ–º –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ü–µ–ª–∏
        from app.db.models.goal import Goal, GoalType, Achievement, UserAchievement
        
        existing_goals = db.query(Goal).filter(Goal.user_id == user.id).count()
        if existing_goals == 0:
            print('–°–æ–∑–¥–∞–Ω–∏–µ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ü–µ–ª–µ–π...')
            
            mock_goals = [
                {
                    'title': '–ó–∞–≤–µ—Ä—à–∏—Ç—å –≤—Å–µ –∫—É—Ä—Å–æ–≤—ã–µ —Ä–∞–±–æ—Ç—ã',
                    'description': '–¶–µ–ª—å –Ω–∞ —Å–µ–º–µ—Å—Ç—Ä: —É—Å–ø–µ—à–Ω–æ —Å–¥–∞—Ç—å –≤—Å–µ –∫—É—Ä—Å–æ–≤—ã–µ –ø—Ä–æ–µ–∫—Ç—ã —Å —Ö–æ—Ä–æ—à–∏–º–∏ –æ—Ü–µ–Ω–∫–∞–º–∏',
                    'goal_type': GoalType.semester,
                    'target_value': 4,
                    'current_value': 1,
                    'start_date': datetime.now() - timedelta(days=60),
                    'end_date': datetime.now() + timedelta(days=30),
                },
                {
                    'title': '–í—ã–ø–æ–ª–Ω–∏—Ç—å 15 –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã—Ö —Ä–∞–±–æ—Ç',
                    'description': '–ú–µ—Å—è—á–Ω–∞—è —Ü–µ–ª—å –ø–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã—Ö —Ä–∞–±–æ—Ç –ø–æ —Ä–∞–∑–ª–∏—á–Ω—ã–º –ø—Ä–µ–¥–º–µ—Ç–∞–º',
                    'goal_type': GoalType.monthly,
                    'target_value': 15,
                    'current_value': 8,
                    'start_date': datetime.now() - timedelta(days=20),
                    'end_date': datetime.now() + timedelta(days=10),
                },
                {
                    'title': '–ü–æ—Å–µ—Ç–∏—Ç—å –≤—Å–µ –ª–µ–∫—Ü–∏–∏ –Ω–∞ –Ω–µ–¥–µ–ª–µ',
                    'description': '–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∞—è —Ü–µ–ª—å –ø–æ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏: –Ω–µ –ø—Ä–æ–ø—É—Å–∫–∞—Ç—å –Ω–∏ –æ–¥–Ω–æ–π –ª–µ–∫—Ü–∏–∏',
                    'goal_type': GoalType.weekly,
                    'target_value': 12,
                    'current_value': 9,
                    'start_date': datetime.now() - timedelta(days=5),
                    'end_date': datetime.now() + timedelta(days=2),
                },
                {
                    'title': '–ò–∑—É—á–∏—Ç—å React Native',
                    'description': '–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Ü–µ–ª—å: –æ—Å–≤–æ–∏—Ç—å —Ñ—Ä–µ–π–º–≤–æ—Ä–∫ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –º–æ–±–∏–ª—å–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π',
                    'goal_type': GoalType.custom,
                    'target_value': 20,
                    'current_value': 12,
                    'start_date': datetime.now() - timedelta(days=30),
                    'end_date': datetime.now() + timedelta(days=30),
                },
                {
                    'title': '–ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ —Å–µ—Å—Å–∏–∏',
                    'description': '–ó–∞–≤–µ—Ä—à–∏—Ç—å –≤—Å–µ –¥–æ–ª–≥–∏ –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ —ç–∫–∑–∞–º–µ–Ω–∞—Ü–∏–æ–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏',
                    'goal_type': GoalType.semester,
                    'target_value': 8,
                    'current_value': 5,
                    'start_date': datetime.now() - timedelta(days=45),
                    'end_date': datetime.now() + timedelta(days=15),
                }
            ]
            
            for goal_data in mock_goals:
                db_goal = Goal(
                    user_id=user.id,
                    title=goal_data['title'],
                    description=goal_data['description'],
                    goal_type=goal_data['goal_type'],
                    target_value=goal_data['target_value'],
                    current_value=goal_data['current_value'],
                    start_date=goal_data['start_date'],
                    end_date=goal_data['end_date'],
                    is_completed=goal_data['current_value'] >= goal_data['target_value'],
                    completed_at=datetime.now() if goal_data['current_value'] >= goal_data['target_value'] else None
                )
                db.add(db_goal)
                db.commit()
                print(f'  ‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ü–µ–ª—å: {goal_data[\"title\"]}')
            
            print(f'‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(mock_goals)} –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ü–µ–ª–µ–π')
        else:
            print(f'üîÑ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ü–µ–ª–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç ({existing_goals} —à—Ç.)')
            
        # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
        existing_achievements = db.query(Achievement).count()
        if existing_achievements == 0:
            print('–°–æ–∑–¥–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π...')
            
            mock_achievements = [
                {
                    'name': '–ü–µ—Ä–≤—ã–µ —à–∞–≥–∏',
                    'description': '–°–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ—é –ø–µ—Ä–≤—É—é –∑–∞–¥–∞—á—É',
                    'icon': 'üéØ',
                    'condition_type': 'tasks_created',
                    'condition_value': 1,
                    'points': 10
                },
                {
                    'name': '–û—Ç–ª–∏—á–Ω—ã–π —Å—Ç–∞—Ä—Ç',
                    'description': '–í—ã–ø–æ–ª–Ω–∏—Ç–µ 5 –∑–∞–¥–∞—á',
                    'icon': '‚≠ê',
                    'condition_type': 'tasks_completed',
                    'condition_value': 5,
                    'points': 25
                },
                {
                    'name': '–ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ã–π —Å—Ç—É–¥–µ–Ω—Ç',
                    'description': '–í—ã–ø–æ–ª–Ω–∏—Ç–µ 20 –∑–∞–¥–∞—á',
                    'icon': 'üèÜ',
                    'condition_type': 'tasks_completed',
                    'condition_value': 20,
                    'points': 50
                },
                {
                    'name': '–ú–∞—Å—Ç–µ—Ä –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è',
                    'description': '–í—ã–ø–æ–ª–Ω–∏—Ç–µ 50 –∑–∞–¥–∞—á',
                    'icon': 'üëë',
                    'condition_type': 'tasks_completed',
                    'condition_value': 50,
                    'points': 100
                },
                {
                    'name': '–ü–æ—Å—Ç–æ—è–Ω—Å—Ç–≤–æ',
                    'description': '–í—ã–ø–æ–ª–Ω—è–π—Ç–µ –∑–∞–¥–∞—á–∏ 7 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥',
                    'icon': 'üî•',
                    'condition_type': 'streak_days',
                    'condition_value': 7,
                    'points': 30
                },
                {
                    'name': '–¶–µ–ª–µ—É—Å—Ç—Ä–µ–º–ª–µ–Ω–Ω–æ—Å—Ç—å',
                    'description': '–î–æ—Å—Ç–∏–≥–Ω–∏—Ç–µ –ø–µ—Ä–≤–æ–π —Ü–µ–ª–∏',
                    'icon': 'üé™',
                    'condition_type': 'goals_completed',
                    'condition_value': 1,
                    'points': 40
                }
            ]
            
            for achievement_data in mock_achievements:
                db_achievement = Achievement(
                    name=achievement_data['name'],
                    description=achievement_data['description'],
                    icon=achievement_data['icon'],
                    condition_type=achievement_data['condition_type'],
                    condition_value=achievement_data['condition_value'],
                    points=achievement_data['points']
                )
                db.add(db_achievement)
                db.commit()
                
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            achievements_to_award = db.query(Achievement).filter(
                Achievement.condition_type.in_(['tasks_created', 'tasks_completed'])
            ).limit(2).all()
            
            for achievement in achievements_to_award:
                user_achievement = UserAchievement(
                    user_id=user.id,
                    achievement_id=achievement.id,
                    earned_at=datetime.now() - timedelta(days=random.randint(1, 10))
                )
                db.add(user_achievement)
            
            db.commit()
            print(f'‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(mock_achievements)} –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π')
            print(f'‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø—Ä–∏—Å–≤–æ–µ–Ω–æ {len(achievements_to_award)} –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π')
        else:
            print(f'üîÑ –°–∏—Å—Ç–µ–º–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç ({existing_achievements} —à—Ç.)')
            
    except Exception as e:
        print(f'‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}')
        print('–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞...')
    finally:
        db.close()
        
except Exception as e:
    print(f'‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}')
    print('–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –±–µ–∑ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...')
"

echo "üéØ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞..."
exec uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload 