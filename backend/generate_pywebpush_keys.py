#!/usr/bin/env python3
"""
–ì–µ–Ω–µ—Ä–∞—Ü–∏—è VAPID –∫–ª—é—á–µ–π —Å –ø–æ–º–æ—â—å—é pywebpush
"""

import subprocess
import sys
import os

try:
    # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É pywebpush –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª—é—á–µ–π
    result = subprocess.run(['python', '-c', '''
from pywebpush import webpush
import json

# –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª—é—á–∏
vapid_private_key, vapid_public_key = webpush.generate_vapid_keys()

print("üîë VAPID –∫–ª—é—á–∏ –¥–ª—è push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:")
print("=" * 60)
print(f"VAPID_PRIVATE_KEY={vapid_private_key}")
print(f"VAPID_PUBLIC_KEY={vapid_public_key}")
print("=" * 60)
print()
print("üìù –û–±–Ω–æ–≤–∏—Ç–µ —ç—Ç–∏ –∫–ª—é—á–∏ –≤:")
print("1. docker-compose.yml")
print("2. .env —Ñ–∞–π–ª–µ")
print("3. NEXT_PUBLIC_VAPID_PUBLIC_KEY –≤ frontend")
'''], capture_output=True, text=True)
    
    if result.returncode == 0:
        print(result.stdout)
    else:
        print("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª—é—á–µ–π:")
        print(result.stderr)
        
        # –ü–æ–ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–±
        print("\nüîÑ –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–±...")
        
        from cryptography.hazmat.primitives import serialization
        from cryptography.hazmat.primitives.asymmetric import ec
        import base64
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª—é—á EC P-256
        private_key = ec.generate_private_key(ec.SECP256R1())
        
        # –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –≤ PEM —Ñ–æ—Ä–º–∞—Ç–µ 
        private_pem = private_key.private_bytes(
            encoding=serialization.Encoding.PEM,
            format=serialization.PrivateFormat.PKCS8,
            encryption_algorithm=serialization.NoEncryption()
        ).decode('utf-8')
        
        # –ü—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á –≤ –Ω–µ—Å–∂–∞—Ç–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
        public_key = private_key.public_key()
        public_numbers = public_key.public_numbers()
        x_bytes = public_numbers.x.to_bytes(32, 'big')
        y_bytes = public_numbers.y.to_bytes(32, 'big')
        public_key_bytes = b'\x04' + x_bytes + y_bytes
        public_key_b64 = base64.urlsafe_b64encode(public_key_bytes).decode('ascii').rstrip('=')
        
        print("üîë –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ VAPID –∫–ª—é—á–∏:")
        print("=" * 60)
        print(f"VAPID_PRIVATE_KEY={private_pem}")
        print(f"VAPID_PUBLIC_KEY={public_key_b64}")
        print("=" * 60)

except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    sys.exit(1) 