import json
import logging
import base64
import httpx
import socket
import dns.resolver
from typing import Optional, Dict, Any
from cryptography.hazmat.primitives import serialization, hashes
from cryptography.hazmat.primitives.asymmetric import ec
from cryptography.hazmat.backends import default_backend
from jwt import encode as jwt_encode
from datetime import datetime, timedelta, timezone
import os

from ..db.session import get_db
from ..db.models.user import User
from ..db.models.push_subscription import PushSubscription

logger = logging.getLogger(__name__)

class PushNotificationService:
    def __init__(self):
        self.vapid_private_key = os.getenv('VAPID_PRIVATE_KEY', '')
        self.vapid_public_key = os.getenv('VAPID_PUBLIC_KEY', '')
        self.vapid_subject = os.getenv('VAPID_SUBJECT', 'mailto:admin@example.com')
        
        # –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å VAPID –∫–ª—é—á–µ–π –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        logger.info(f"VAPID –∫–ª—é—á–∏: –ø—Ä–∏–≤–∞—Ç–Ω—ã–π={'‚úÖ –Ω–∞–π–¥–µ–Ω' if self.vapid_private_key else '‚ùå –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}, –ø—É–±–ª–∏—á–Ω—ã–π={'‚úÖ –Ω–∞–π–¥–µ–Ω' if self.vapid_public_key else '‚ùå –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}")
        
    async def send_notification(self, user_id: int, title: str, body: str, data: Optional[Dict[str, Any]] = None) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        try:
            logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {title}")
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            with next(get_db()) as db:
                subscription = db.query(PushSubscription).filter(
                    PushSubscription.user_id == user_id
                ).first()
                
                if not subscription:
                    logger.warning(f"–ü–æ–¥–ø–∏—Å–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                    return False
                
                logger.info(f"–ù–∞–π–¥–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: endpoint={subscription.endpoint[:50]}...")
                
                subscription_info = {
                    'endpoint': subscription.endpoint,
                    'keys': {
                        'p256dh': subscription.p256dh_key,
                        'auth': subscription.auth_key
                    }
                }
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Ç–µ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            network_ok = await self._check_network_connectivity()
            if not network_ok:
                logger.error("–°–µ—Ç–µ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ")
                return False
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º payload
            payload = {
                'title': title,
                'body': body,
                'icon': '/icons/icon-192x192.png',
                'badge': '/icons/icon-72x72.png',
                'tag': 'notification',
                'requireInteraction': False,
                'data': data or {}
            }
            
            # –ü—Ä–æ–±—É–µ–º —Ç–æ–ª—å–∫–æ pywebpush (–±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω—ã–π –º–µ—Ç–æ–¥)
            success = await self._send_via_pywebpush(subscription_info, payload)
            if success:
                logger.info("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ pywebpush")
                return True
            
            logger.error("–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å")
            return False
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}", exc_info=True)
            return False
    
    async def _check_network_connectivity(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Ç–µ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –≤–Ω–µ—à–Ω–∏–º —Å–µ—Ä–≤–µ—Ä–∞–º"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º DNS —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
            try:
                dns.resolver.resolve('google.com', 'A')
                logger.info("‚úÖ DNS —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            except Exception as e:
                logger.error(f"‚ùå DNS —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: {e}")
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º HTTP –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            async with httpx.AsyncClient(timeout=10.0) as client:
                try:
                    response = await client.get('https://httpbin.org/get')
                    if response.status_code == 200:
                        logger.info("‚úÖ HTTP –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –≤–Ω–µ—à–Ω–∏–º —Å–µ—Ä–≤–µ—Ä–∞–º —Ä–∞–±–æ—Ç–∞–µ—Ç")
                        return True
                    else:
                        logger.error(f"‚ùå HTTP –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –≤–µ—Ä–Ω—É–ª–æ —Å—Ç–∞—Ç—É—Å: {response.status_code}")
                        return False
                except Exception as e:
                    logger.error(f"‚ùå HTTP –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: {e}")
                    return False
                    
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ—Ç–µ–≤–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            return False
    
    async def _send_via_pywebpush(self, subscription_info: Dict, payload: Dict) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑ pywebpush (–æ—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥)"""
        try:
            from pywebpush import webpush, WebPushException
            
            logger.info("–ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ—Ä–µ–∑ pywebpush")
            logger.info(f"Endpoint: {subscription_info['endpoint'][:50]}...")
            logger.info(f"VAPID subject: {self.vapid_subject}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞
            if not self.vapid_private_key.startswith('-----BEGIN PRIVATE KEY-----'):
                logger.error("‚ùå VAPID –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –Ω–µ –≤ PEM —Ñ–æ—Ä–º–∞—Ç–µ")
                return False
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º VAPID claims
            vapid_claims = {
                "sub": self.vapid_subject
            }
            
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º payload: {json.dumps(payload, ensure_ascii=False)[:100]}...")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            response = webpush(
                subscription_info=subscription_info,
                data=json.dumps(payload),
                vapid_private_key=self.vapid_private_key,
                vapid_claims=vapid_claims,
                timeout=30
            )
            
            logger.info(f"‚úÖ pywebpush –æ—Ç–≤–µ—Ç: {response}")
            return True
            
        except WebPushException as e:
            logger.error(f"‚ùå WebPushException: {e}", exc_info=True)
            
            # –ü–æ–¥—Ä–æ–±–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –æ—à–∏–±–æ–∫ WebPush
            if hasattr(e, 'response') and e.response:
                logger.error(f"WebPush response status: {e.response.status_code}")
                logger.error(f"WebPush response text: {e.response.text}")
            
            return False
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ pywebpush –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}", exc_info=True)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ç–∏–ø—ã –æ—à–∏–±–æ–∫
            error_str = str(e)
            if "Could not deserialize key data" in error_str:
                logger.error("üîë –ü—Ä–æ–±–ª–µ–º–∞ —Å —Ñ–æ—Ä–º–∞—Ç–æ–º VAPID –∫–ª—é—á–µ–π - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∏—Ö –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å")
            elif "header too long" in error_str:
                logger.error("üìè –ü—Ä–æ–±–ª–µ–º–∞ —Å –¥–ª–∏–Ω–æ–π –∑–∞–≥–æ–ª–æ–≤–∫–∞ VAPID –∫–ª—é—á–∞")
            elif "Connection" in error_str:
                logger.error("üåê –°–µ—Ç–µ–≤–∞—è –ø—Ä–æ–±–ª–µ–º–∞ - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ")
            
            return False
    
    def _create_vapid_token(self, audience: str) -> Optional[str]:
        """–°–æ–∑–¥–∞–Ω–∏–µ VAPID JWT —Ç–æ–∫–µ–Ω–∞"""
        try:
            if not self.vapid_private_key:
                logger.error("VAPID private key –Ω–µ –∑–∞–¥–∞–Ω")
                return None
            
            # –û—á–∏—â–∞–µ–º –∫–ª—é—á –æ—Ç —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
            clean_key = self.vapid_private_key.replace('\\n', '\n')
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á
            try:
                private_key = serialization.load_pem_private_key(
                    clean_key.encode(),
                    password=None,
                    backend=default_backend()
                )
                logger.info("‚úÖ VAPID –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ VAPID –∫–ª—é—á–∞: {e}")
                return None
            
            # –°–æ–∑–¥–∞–µ–º claims
            now = datetime.now(timezone.utc)
            claims = {
                'aud': audience,
                'exp': int((now + timedelta(hours=12)).timestamp()),
                'sub': self.vapid_subject
            }
            
            # –°–æ–∑–¥–∞–µ–º JWT —Ç–æ–∫–µ–Ω
            token = jwt_encode(
                claims,
                private_key,
                algorithm='ES256'
            )
            
            logger.info("‚úÖ VAPID —Ç–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω")
            return token
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è VAPID —Ç–æ–∫–µ–Ω–∞: {e}", exc_info=True)
            return None
    
    async def send_test_notification(self, user_id: int) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        return await self.send_notification(
            user_id=user_id,
            title="üß™ –¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ",
            body="–°–∏—Å—Ç–µ–º–∞ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!",
            data={'test': True}
        )

# Singleton instance
push_service = PushNotificationService() 