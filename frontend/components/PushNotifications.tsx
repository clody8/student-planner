'use client';

import { useState, useEffect } from 'react';
import { authAPI } from '@/lib/api';
import { BellIcon, BellSlashIcon } from '@heroicons/react/24/outline';

interface PushNotificationsProps {
  className?: string;
}

// –ò—Å–ø–æ–ª—å–∑—É–µ–º VAPID –∫–ª—é—á –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è, –∞ –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω - fallback –Ω–∞ –∫–ª—é—á —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
const VAPID_PUBLIC_KEY = process.env.NEXT_PUBLIC_VAPID_PUBLIC_KEY || 'BHQXM2uCX-GRRtBuhQkMt-A9_rEbnj0P_qoWTbYKi7gaGs0zeD8efU2zSkVd7HqfwFC8A-O_bl0jP2Nwrdm0O8s';

export default function PushNotifications({ className = '' }: PushNotificationsProps) {
  const [isSupported, setIsSupported] = useState(false);
  const [isSubscribed, setIsSubscribed] = useState(false);
  const [isLoading, setIsLoading] = useState(false);
  const [permission, setPermission] = useState<NotificationPermission>('default');

  useEffect(() => {
    console.log('PushNotifications component mounted');
    
    if (typeof window !== 'undefined') {
      const supported = 'serviceWorker' in navigator && 'PushManager' in window;
      console.log('Push support check:', {
        hasWindow: typeof window !== 'undefined',
        hasServiceWorker: 'serviceWorker' in navigator,
        hasPushManager: 'PushManager' in window,
        supported,
        notificationPermission: Notification.permission
      });
      setIsSupported(supported);
      setPermission(Notification.permission);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –µ—Å—Ç—å
      if (supported) {
        checkSubscriptionStatus();
      }
    }
  }, []);

  const registerServiceWorker = async () => {
    console.log('Registering push service worker...');
    
    try {
      const registration = await navigator.serviceWorker.register('/push-sw.js', {
        scope: '/'
      });
      
      console.log('Push service worker registered:', registration);
      
      // –ñ–¥–µ–º –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
      if (registration.installing) {
        console.log('Service worker installing...');
        await new Promise(resolve => {
          registration.installing!.addEventListener('statechange', function() {
            if (this.state === 'activated') {
              resolve(undefined);
            }
          });
        });
      }
      
      return registration;
    } catch (error) {
      console.error('Failed to register push service worker:', error);
      throw error;
    }
  };

  const checkSubscriptionStatus = async () => {
    console.log('Checking subscription status...');

    try {
      // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
      let registration = await navigator.serviceWorker.getRegistration('/');
      
      if (!registration) {
        console.log('No service worker registration found, registering new one...');
        registration = await registerServiceWorker();
      } else {
        console.log('Found existing service worker registration:', registration);
      }
      
      console.log('Getting existing subscription...');
      const subscription = await registration.pushManager.getSubscription();
      console.log('Existing subscription:', subscription);
      
      setIsSubscribed(!!subscription);
      console.log('Subscription status set to:', !!subscription);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏:', error);
      // –ù–µ –±–ª–æ–∫–∏—Ä—É–µ–º —Ä–∞–±–æ—Ç—É, –µ—Å–ª–∏ service worker –Ω–µ –≥–æ—Ç–æ–≤
      setIsSubscribed(false);
    }
  };

  const urlBase64ToUint8Array = (base64String: string) => {
    const padding = '='.repeat((4 - base64String.length % 4) % 4);
    const base64 = (base64String + padding)
      .replace(/\-/g, '+')
      .replace(/_/g, '/');

    const rawData = window.atob(base64);
    const outputArray = new Uint8Array(rawData.length);

    for (let i = 0; i < rawData.length; ++i) {
      outputArray[i] = rawData.charCodeAt(i);
    }
    return outputArray;
  };

  const subscribeToPush = async () => {
    console.log('=== Starting push subscription process ===');
    if (!isSupported) {
      console.log('Push not supported, aborting subscription');
      return;
    }

    setIsLoading(true);
    console.log('Loading state set to true');
    
    try {
      // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
      console.log('Requesting notification permission...');
      const permission = await Notification.requestPermission();
      console.log('Permission result:', permission);
      setPermission(permission);

      if (permission !== 'granted') {
        throw new Error('–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ');
      }

      // –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º service worker
      console.log('Getting service worker registration...');
      
      let registration = await navigator.serviceWorker.getRegistration('/');
      
      if (!registration) {
        console.log('No service worker found, registering new one...');
        registration = await registerServiceWorker();
      } else {
        console.log('Using existing service worker registration:', registration);
      }
      
      console.log('Registration scope:', registration.scope);
      console.log('Registration active:', registration.active);

      // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
      console.log('Subscribing to push manager...');
      console.log('VAPID key:', VAPID_PUBLIC_KEY);
      
      const applicationServerKey = urlBase64ToUint8Array(VAPID_PUBLIC_KEY);
      console.log('Converted VAPID key:', applicationServerKey);
      
      const subscription = await registration.pushManager.subscribe({
        userVisibleOnly: true,
        applicationServerKey: applicationServerKey
      });
      console.log('Push subscription created:', subscription);

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ —Å–µ—Ä–≤–µ—Ä
      const p256dhKey = subscription.getKey('p256dh');
      const authKey = subscription.getKey('auth');
      console.log('Subscription keys:', { p256dhKey, authKey });
      
      if (!p256dhKey || !authKey) {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–ª—é—á–∏ –ø–æ–¥–ø–∏—Å–∫–∏');
      }

      const subscriptionData = {
        endpoint: subscription.endpoint,
        keys: {
          p256dh: btoa(String.fromCharCode(...Array.from(new Uint8Array(p256dhKey)))),
          auth: btoa(String.fromCharCode(...Array.from(new Uint8Array(authKey))))
        }
      };
      console.log('Subscription data to send:', subscriptionData);

      console.log('Sending subscription to server...');
      const response = await authAPI.savePushSubscription(subscriptionData);
      console.log('Server response:', response);

      setIsSubscribed(true);
      console.log('Subscription state updated to true');
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ —á–µ—Ä–µ–∑ Service Worker
      if (Notification.permission === 'granted') {
        console.log('Showing success notification...');
        try {
          registration.showNotification('üéâ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã!', {
            body: '–¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –¥–µ–¥–ª–∞–π–Ω–∞—Ö',
            icon: '/icons/icon-192x192.png',
            badge: '/icons/icon-72x72.png',
          });
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± —É—Å–ø–µ—Ö–µ:', error);
        }
        // –¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
      }

      console.log('=== Push subscription completed successfully ===');

    } catch (error: any) {
      console.error('=== Push subscription failed ===');
      console.error('Error details:', error);
      console.error('Error stack:', error.stack);
      
      let errorMessage = '–û—à–∏–±–∫–∞ –≤–∫–ª—é—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π';
      if (error.message) {
        errorMessage = error.message;
      } else if (error.response?.data?.detail) {
        errorMessage = error.response.data.detail;
      } else if (error.code === 'NetworkError') {
        errorMessage = '–û—à–∏–±–∫–∞ —Å–µ—Ç–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É.';
      }
      
      console.log('Showing error message:', errorMessage);
      alert(errorMessage);
    } finally {
      console.log('Setting loading state to false');
      setIsLoading(false);
    }
  };

  const unsubscribeFromPush = async () => {
    if (!isSupported) return;

    setIsLoading(true);
    try {
      const registration = await navigator.serviceWorker.getRegistration('/');
      if (!registration) {
        console.log('No service worker registration found');
        setIsSubscribed(false);
        return;
      }
      
      const subscription = await registration.pushManager.getSubscription();

      if (subscription) {
        await subscription.unsubscribe();
        
        // –£–≤–µ–¥–æ–º–ª—è–µ–º —Å–µ—Ä–≤–µ—Ä –æ–± –æ—Ç–ø–∏—Å–∫–µ
        try {
          await authAPI.savePushSubscription({
            endpoint: '',
            keys: { p256dh: '', auth: '' }
          });
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞ –æ–± –æ—Ç–ø–∏—Å–∫–µ:', error);
        }
      }

      setIsSubscribed(false);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø–∏—Å–∫–∏ –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', error);
      alert('–û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π');
    } finally {
      setIsLoading(false);
    }
  };



  if (!isSupported) {
    return (
      <div className={`p-4 bg-gray-50 rounded-lg ${className}`}>
        <div className="flex items-center space-x-3">
          <BellSlashIcon className="h-6 w-6 text-gray-400" />
          <div>
            <h3 className="font-medium text-gray-900">Push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã</h3>
            <p className="text-sm text-gray-600">–í–∞—à –±—Ä–∞—É–∑–µ—Ä –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</p>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className={`p-4 sm:p-6 bg-white rounded-2xl shadow-lg border border-gray-200 ${className}`}>
      {/* –ú–æ–±–∏–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è */}
      <div className="block sm:hidden">
        <div className="flex items-center justify-between mb-4">
          <div className="flex items-center space-x-3 flex-1 min-w-0">
            <div className="p-2 bg-gradient-to-r from-blue-500 to-purple-600 rounded-lg flex-shrink-0">
              {isSubscribed ? (
                <BellIcon className="h-5 w-5 text-white" />
              ) : (
                <BellSlashIcon className="h-5 w-5 text-white" />
              )}
            </div>
            <div className="min-w-0 flex-1">
              <h3 className="font-semibold text-gray-900 text-sm truncate">Push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</h3>
              <p className="text-xs text-gray-600">
                {isSubscribed ? '–í–∫–ª—é—á–µ–Ω—ã' : '–û—Ç–∫–ª—é—á–µ–Ω—ã'}
              </p>
            </div>
          </div>
        </div>
        
        <div className="space-y-2">
          <button
            onClick={isSubscribed ? unsubscribeFromPush : subscribeToPush}
            disabled={isLoading}
            className={`w-full px-4 py-3 rounded-lg font-medium transition-colors text-sm ${
              isSubscribed
                ? 'bg-red-100 text-red-700 hover:bg-red-200'
                : 'bg-green-100 text-green-700 hover:bg-green-200'
            } ${isLoading ? 'opacity-50 cursor-not-allowed' : ''}`}
          >
            {isLoading ? (
              <div className="flex items-center justify-center space-x-2">
                <div className="animate-spin rounded-full h-4 w-4 border-2 border-current border-t-transparent"></div>
                <span>–ü–æ–¥–æ–∂–¥–∏—Ç–µ...</span>
              </div>
            ) : isSubscribed ? (
              '–û—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è'
            ) : (
              '–í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è'
            )}
          </button>
        </div>
      </div>

      {/* –î–µ—Å–∫—Ç–æ–ø–Ω–∞—è –≤–µ—Ä—Å–∏—è */}
      <div className="hidden sm:block">
        <div className="flex items-center justify-between mb-4">
          <div className="flex items-center space-x-3">
            <div className="p-2 bg-gradient-to-r from-blue-500 to-purple-600 rounded-lg">
              {isSubscribed ? (
                <BellIcon className="h-6 w-6 text-white" />
              ) : (
                <BellSlashIcon className="h-6 w-6 text-white" />
              )}
            </div>
            <div>
              <h3 className="font-semibold text-gray-900">Push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</h3>
              <p className="text-sm text-gray-600">
                {isSubscribed ? '–í–∫–ª—é—á–µ–Ω—ã' : '–û—Ç–∫–ª—é—á–µ–Ω—ã'}
              </p>
            </div>
          </div>
          <div className="flex space-x-2">
            <button
              onClick={isSubscribed ? unsubscribeFromPush : subscribeToPush}
              disabled={isLoading}
              className={`px-4 py-2 rounded-lg font-medium transition-colors ${
                isSubscribed
                  ? 'bg-red-100 text-red-700 hover:bg-red-200'
                  : 'bg-green-100 text-green-700 hover:bg-green-200'
              } ${isLoading ? 'opacity-50 cursor-not-allowed' : ''}`}
            >
              {isLoading ? (
                <div className="animate-spin rounded-full h-4 w-4 border-2 border-current border-t-transparent"></div>
              ) : isSubscribed ? (
                '–û—Ç–∫–ª—é—á–∏—Ç—å'
              ) : (
                '–í–∫–ª—é—á–∏—Ç—å'
              )}
            </button>
          </div>
        </div>
      </div>

      {permission === 'denied' && (
        <div className="p-3 bg-red-50 border border-red-200 rounded-lg mb-4">
          <p className="text-sm text-red-700">
            –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã. –†–∞–∑—Ä–µ—à–∏—Ç–µ –∏—Ö –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –±—Ä–∞—É–∑–µ—Ä–∞.
          </p>
        </div>
      )}

      {isSubscribed && (
        <div className="space-y-2 text-sm text-gray-600 mt-4">
          <div className="flex items-center space-x-2">
            <span className="w-2 h-2 bg-green-500 rounded-full flex-shrink-0"></span>
            <span className="text-xs sm:text-sm">–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –¥–µ–¥–ª–∞–π–Ω–∞—Ö</span>
          </div>
          <div className="flex items-center space-x-2">
            <span className="w-2 h-2 bg-green-500 rounded-full flex-shrink-0"></span>
            <span className="text-xs sm:text-sm">–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á–∞—Ö</span>
          </div>
          <div className="flex items-center space-x-2">
            <span className="w-2 h-2 bg-green-500 rounded-full flex-shrink-0"></span>
            <span className="text-xs sm:text-sm">–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —Å–≤–æ–¥–∫–∏</span>
          </div>
        </div>
      )}
    </div>
  );
} 