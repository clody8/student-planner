'use client';

import { useState, useEffect } from 'react';
import { BellIcon, ClockIcon, CalendarDaysIcon, CheckIcon, XMarkIcon } from '@heroicons/react/24/outline';
import { authAPI } from '@/lib/api';

interface ScheduledNotification {
  id: number;
  title: string;
  message: string;
  scheduledFor: string;
  type: 'deadline' | 'reminder' | 'daily' | 'weekly';
  isActive: boolean;
  recurring?: {
    frequency: 'daily' | 'weekly' | 'monthly';
    days?: number[]; // 0-6 –¥–ª—è –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏
    time: string; // HH:mm
  };
}

interface NotificationSchedule {
  type: 'task_deadline' | 'daily_summary' | 'weekly_review' | 'custom';
  enabled: boolean;
  time: string;
  days?: number[];
}

const defaultSchedules: NotificationSchedule[] = [
  {
    type: 'task_deadline',
    enabled: true,
    time: '09:00',
  },
  {
    type: 'daily_summary',
    enabled: false,
    time: '20:00',
  },
  {
    type: 'weekly_review',
    enabled: false,
    time: '10:00',
    days: [1], // –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫
  },
];

const scheduleTypeNames = {
  task_deadline: '–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –¥–µ–¥–ª–∞–π–Ω–∞—Ö',
  daily_summary: '–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å–≤–æ–¥–∫–∞',
  weekly_review: '–ù–µ–¥–µ–ª—å–Ω—ã–π –æ–±–∑–æ—Ä',
  custom: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ',
};

const dayNames = ['–í—Å', '–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±'];

export default function ScheduledNotifications() {
  const [schedules, setSchedules] = useState<NotificationSchedule[]>(defaultSchedules);
  const [notifications, setNotifications] = useState<ScheduledNotification[]>([]);
  const [isLoading, setIsLoading] = useState(false);
  const [showAddForm, setShowAddForm] = useState(false);
  const [newNotification, setNewNotification] = useState({
    title: '',
    message: '',
    type: 'reminder' as const,
    scheduledFor: '',
    recurring: false,
    frequency: 'daily' as 'daily' | 'weekly',
    time: '09:00',
    days: [] as number[],
  });

  useEffect(() => {
    loadSchedules();
    loadNotifications();
  }, []);

  const loadSchedules = async () => {
    try {
      // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–∞–≥—Ä—É–∂–∞–µ–º —Å —Å–µ—Ä–≤–µ—Ä–∞
      const savedSchedules = localStorage.getItem('notification_schedules');
      if (savedSchedules) {
        setSchedules(JSON.parse(savedSchedules));
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π:', error);
    }
  };

  const loadNotifications = async () => {
    try {
      // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–∞–≥—Ä—É–∂–∞–µ–º —Å —Å–µ—Ä–≤–µ—Ä–∞
      const savedNotifications = localStorage.getItem('scheduled_notifications');
      if (savedNotifications) {
        setNotifications(JSON.parse(savedNotifications));
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', error);
    }
  };

  const saveSchedules = async (newSchedules: NotificationSchedule[]) => {
    try {
      localStorage.setItem('notification_schedules', JSON.stringify(newSchedules));
      setSchedules(newSchedules);
      
      // –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–µ Service Worker –∑–∞–¥–∞—á–∏
      await scheduleServiceWorkerNotifications(newSchedules);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π:', error);
    }
  };

  const scheduleServiceWorkerNotifications = async (schedules: NotificationSchedule[]) => {
    if ('serviceWorker' in navigator) {
      const registration = await navigator.serviceWorker.ready;
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≤ Service Worker
      registration.active?.postMessage({
        type: 'SCHEDULE_NOTIFICATIONS',
        schedules: schedules.filter(s => s.enabled),
      });
    }
  };

  const toggleSchedule = async (index: number) => {
    const newSchedules = [...schedules];
    newSchedules[index].enabled = !newSchedules[index].enabled;
    await saveSchedules(newSchedules);
  };

  const updateScheduleTime = async (index: number, time: string) => {
    const newSchedules = [...schedules];
    newSchedules[index].time = time;
    await saveSchedules(newSchedules);
  };

  const updateScheduleDays = async (index: number, days: number[]) => {
    const newSchedules = [...schedules];
    newSchedules[index].days = days;
    await saveSchedules(newSchedules);
  };

  const addCustomNotification = async () => {
    if (!newNotification.title || !newNotification.message) {
      alert('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è');
      return;
    }

    setIsLoading(true);
    try {
      const notification: ScheduledNotification = {
        id: Date.now(),
        title: newNotification.title,
        message: newNotification.message,
        type: newNotification.type,
        scheduledFor: newNotification.recurring 
          ? 'recurring' 
          : newNotification.scheduledFor,
        isActive: true,
        recurring: newNotification.recurring ? {
          frequency: newNotification.frequency,
          time: newNotification.time,
          days: newNotification.days,
        } : undefined,
      };

      const newNotifications = [...notifications, notification];
      setNotifications(newNotifications);
      localStorage.setItem('scheduled_notifications', JSON.stringify(newNotifications));

      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É
      setNewNotification({
        title: '',
        message: '',
        type: 'reminder',
        scheduledFor: '',
        recurring: false,
        frequency: 'daily',
        time: '09:00',
        days: [],
      });
      setShowAddForm(false);

      // –ü–ª–∞–Ω–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
      await scheduleCustomNotification(notification);
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è');
    } finally {
      setIsLoading(false);
    }
  };

  const scheduleCustomNotification = async (notification: ScheduledNotification) => {
    if ('serviceWorker' in navigator) {
      const registration = await navigator.serviceWorker.ready;
      
      registration.active?.postMessage({
        type: 'SCHEDULE_CUSTOM_NOTIFICATION',
        notification,
      });
    }
  };

  const removeNotification = async (id: number) => {
    const newNotifications = notifications.filter(n => n.id !== id);
    setNotifications(newNotifications);
    localStorage.setItem('scheduled_notifications', JSON.stringify(newNotifications));
  };

  const sendTestNotification = async () => {
    try {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ backend –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
      const response = await authAPI.sendTestNotification();
      console.log('Test notification sent:', response);
      
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —á–µ—Ä–µ–∑ Service Worker
      if ('serviceWorker' in navigator && 'PushManager' in window) {
        if (Notification.permission === 'granted') {
          try {
            const registration = await navigator.serviceWorker.ready;
            registration.showNotification('üîî –¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ', {
              body: '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–ª—É—á–µ–Ω–∏–µ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è',
              icon: '/icons/icon-192x192.png',
              badge: '/icons/icon-72x72.png',
              tag: 'test-scheduled',
              requireInteraction: false,
            });
          } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ Service Worker:', error);
          }
        }
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
      alert('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è');
    }
  };

  return (
    <div className="space-y-6">
      <div className="bg-white rounded-2xl shadow-lg border border-gray-200 p-6">
        <div className="flex items-center justify-between mb-6">
          <div className="flex items-center space-x-3">
            <div className="p-2 bg-gradient-to-r from-purple-500 to-pink-600 rounded-lg">
              <ClockIcon className="h-6 w-6 text-white" />
            </div>
            <div>
              <h3 className="font-semibold text-gray-900">–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</h3>
              <p className="text-sm text-gray-600">–ù–∞—Å—Ç—Ä–æ–π—Ç–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è</p>
            </div>
          </div>
          <button
            onClick={sendTestNotification}
            className="px-4 py-2 bg-blue-100 text-blue-700 rounded-lg hover:bg-blue-200 transition-colors text-sm font-medium"
          >
            –¢–µ—Å—Ç
          </button>
        </div>

        <div className="space-y-4">
          {schedules.map((schedule, index) => (
            <div 
              key={schedule.type}
              className="p-4 border border-gray-200 rounded-xl hover:bg-gray-50 transition-colors"
            >
              {/* Mobile Layout */}
              <div className="block sm:hidden">
                <div className="flex items-start justify-between mb-3">
                  <div className="flex items-start space-x-3">
                    <input
                      type="checkbox"
                      checked={schedule.enabled}
                      onChange={() => toggleSchedule(index)}
                      className="h-5 w-5 text-purple-600 border-gray-300 rounded focus:ring-purple-500 mt-0.5"
                    />
                    <div className="flex-1 min-w-0">
                      <h4 className="font-medium text-gray-900 text-sm">
                        {scheduleTypeNames[schedule.type]}
                      </h4>
                      <p className="text-xs text-gray-600">
                        {schedule.type === 'weekly_review' && schedule.days ? 
                          `${schedule.days.map(d => dayNames[d]).join(', ')}, ` : ''}
                        {schedule.time}
                      </p>
                    </div>
                  </div>
                </div>
                
                <div className="space-y-3">
                  <div className="flex items-center space-x-2">
                    <label className="text-sm font-medium text-gray-700 min-w-0 flex-shrink-0">–í—Ä–µ–º—è:</label>
                    <input
                      type="time"
                      value={schedule.time}
                      onChange={(e) => updateScheduleTime(index, e.target.value)}
                      className="flex-1 px-3 py-2 border border-gray-300 rounded-lg text-sm focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                      disabled={!schedule.enabled}
                    />
                  </div>
                  
                  {schedule.type === 'weekly_review' && (
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-2">–î–Ω–∏ –Ω–µ–¥–µ–ª–∏:</label>
                      <div className="flex flex-wrap gap-2">
                        {dayNames.map((day, dayIndex) => (
                          <button
                            key={dayIndex}
                            onClick={() => {
                              const currentDays = schedule.days || [];
                              const newDays = currentDays.includes(dayIndex)
                                ? currentDays.filter(d => d !== dayIndex)
                                : [...currentDays, dayIndex];
                              updateScheduleDays(index, newDays);
                            }}
                            disabled={!schedule.enabled}
                            className={`min-w-[32px] h-8 rounded-full text-xs font-medium transition-colors touch-manipulation ${
                              schedule.days?.includes(dayIndex)
                                ? 'bg-purple-600 text-white'
                                : 'bg-gray-100 text-gray-600 hover:bg-gray-200'
                            } ${!schedule.enabled ? 'opacity-50 cursor-not-allowed' : ''}`}
                          >
                            {day}
                          </button>
                        ))}
                      </div>
                    </div>
                  )}
                </div>
              </div>

              {/* Desktop Layout */}
              <div className="hidden sm:flex sm:items-center sm:justify-between">
                <div className="flex items-center space-x-4">
                  <div className="flex items-center">
                    <input
                      type="checkbox"
                      checked={schedule.enabled}
                      onChange={() => toggleSchedule(index)}
                      className="h-5 w-5 text-purple-600 border-gray-300 rounded focus:ring-purple-500"
                    />
                  </div>
                  <div>
                    <h4 className="font-medium text-gray-900">
                      {scheduleTypeNames[schedule.type]}
                    </h4>
                    <p className="text-sm text-gray-600">
                      {schedule.type === 'weekly_review' && schedule.days ? 
                        `${schedule.days.map(d => dayNames[d]).join(', ')}, ` : ''}
                      {schedule.time}
                    </p>
                  </div>
                </div>

                <div className="flex items-center space-x-3">
                  <input
                    type="time"
                    value={schedule.time}
                    onChange={(e) => updateScheduleTime(index, e.target.value)}
                    className="px-3 py-2 border border-gray-300 rounded-lg text-sm focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                    disabled={!schedule.enabled}
                  />
                  
                  {schedule.type === 'weekly_review' && (
                    <div className="flex flex-wrap gap-1">
                      {dayNames.map((day, dayIndex) => (
                        <button
                          key={dayIndex}
                          onClick={() => {
                            const currentDays = schedule.days || [];
                            const newDays = currentDays.includes(dayIndex)
                              ? currentDays.filter(d => d !== dayIndex)
                              : [...currentDays, dayIndex];
                            updateScheduleDays(index, newDays);
                          }}
                          disabled={!schedule.enabled}
                          className={`w-8 h-8 rounded-full text-xs font-medium transition-colors ${
                            schedule.days?.includes(dayIndex)
                              ? 'bg-purple-600 text-white'
                              : 'bg-gray-100 text-gray-600 hover:bg-gray-200'
                          } ${!schedule.enabled ? 'opacity-50 cursor-not-allowed' : ''}`}
                        >
                          {day}
                        </button>
                      ))}
                    </div>
                  )}
                </div>
              </div>
            </div>
          ))}
        </div>
      </div>

      {/* –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è */}
      <div className="bg-white rounded-2xl shadow-lg border border-gray-200 p-6">
        <div className="flex items-center justify-between mb-6">
          <div className="flex items-center space-x-3">
            <div className="p-2 bg-gradient-to-r from-green-500 to-teal-600 rounded-lg">
              <BellIcon className="h-6 w-6 text-white" />
            </div>
            <div>
              <h3 className="font-semibold text-gray-900">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è</h3>
              <p className="text-sm text-gray-600">–°–æ–∑–¥–∞–π—Ç–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</p>
            </div>
          </div>
          <button
            onClick={() => setShowAddForm(!showAddForm)}
            className="px-4 py-2 bg-green-100 text-green-700 rounded-lg hover:bg-green-200 transition-colors text-sm font-medium"
          >
            {showAddForm ? '–°–∫—Ä—ã—Ç—å' : '–î–æ–±–∞–≤–∏—Ç—å'}
          </button>
        </div>

        {showAddForm && (
          <div className="mb-6 p-4 bg-gray-50 rounded-xl border border-gray-200">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  –ù–∞–∑–≤–∞–Ω–∏–µ
                </label>
                <input
                  type="text"
                  value={newNotification.title}
                  onChange={(e) => setNewNotification(prev => ({ ...prev, title: e.target.value }))}
                  placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –í—ã–ø–æ–ª–Ω–∏—Ç—å –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ"
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent"
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  –°–æ–æ–±—â–µ–Ω–∏–µ
                </label>
                <input
                  type="text"
                  value={newNotification.message}
                  onChange={(e) => setNewNotification(prev => ({ ...prev, message: e.target.value }))}
                  placeholder="–ù–µ –∑–∞–±—É–¥—å—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ –ø–æ –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ"
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent"
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  –ü–æ–≤—Ç–æ—Ä—è—é—â–µ–µ—Å—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                </label>
                <div className="flex items-center">
                  <input
                    type="checkbox"
                    checked={newNotification.recurring}
                    onChange={(e) => setNewNotification(prev => ({ ...prev, recurring: e.target.checked }))}
                    className="h-4 w-4 text-green-600 border-gray-300 rounded focus:ring-green-500"
                  />
                  <span className="ml-2 text-sm text-gray-600">–ü–æ–≤—Ç–æ—Ä—è—Ç—å —Ä–µ–≥—É–ª—è—Ä–Ω–æ</span>
                </div>
              </div>

              {newNotification.recurring ? (
                <>
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                      –ß–∞—Å—Ç–æ—Ç–∞
                    </label>
                    <select
                      value={newNotification.frequency}
                      onChange={(e) => setNewNotification(prev => ({ ...prev, frequency: e.target.value as 'daily' | 'weekly' }))}
                      className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent"
                    >
                      <option value="daily">–ï–∂–µ–¥–Ω–µ–≤–Ω–æ</option>
                      <option value="weekly">–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ</option>
                    </select>
                  </div>

                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                      –í—Ä–µ–º—è
                    </label>
                    <input
                      type="time"
                      value={newNotification.time}
                      onChange={(e) => setNewNotification(prev => ({ ...prev, time: e.target.value }))}
                      className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent"
                    />
                  </div>

                  {newNotification.frequency === 'weekly' && (
                    <div className="md:col-span-2">
                      <label className="block text-sm font-medium text-gray-700 mb-2">
                        –î–Ω–∏ –Ω–µ–¥–µ–ª–∏
                      </label>
                      <div className="flex flex-wrap gap-2">
                        {dayNames.map((day, index) => (
                          <button
                            key={index}
                            type="button"
                            onClick={() => {
                              const newDays = newNotification.days.includes(index)
                                ? newNotification.days.filter(d => d !== index)
                                : [...newNotification.days, index];
                              setNewNotification(prev => ({ ...prev, days: newDays }));
                            }}
                            className={`min-w-[36px] px-3 py-2 rounded-lg text-sm font-medium transition-colors touch-manipulation ${
                              newNotification.days.includes(index)
                                ? 'bg-green-600 text-white'
                                : 'bg-gray-100 text-gray-600 hover:bg-gray-200'
                            }`}
                          >
                            {day}
                          </button>
                        ))}
                      </div>
                    </div>
                  )}
                </>
              ) : (
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è
                  </label>
                  <input
                    type="datetime-local"
                    value={newNotification.scheduledFor}
                    onChange={(e) => setNewNotification(prev => ({ ...prev, scheduledFor: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent"
                  />
                </div>
              )}
            </div>

            <div className="flex justify-end space-x-3 mt-4">
              <button
                onClick={() => setShowAddForm(false)}
                className="px-4 py-2 text-gray-600 hover:text-gray-800 transition-colors"
              >
                –û—Ç–º–µ–Ω–∞
              </button>
              <button
                onClick={addCustomNotification}
                disabled={isLoading}
                className="px-6 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors disabled:opacity-50"
              >
                {isLoading ? '...' : '–î–æ–±–∞–≤–∏—Ç—å'}
              </button>
            </div>
          </div>
        )}

        {/* –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π */}
        {notifications.length > 0 && (
          <div className="space-y-3">
            {notifications.map((notification) => (
              <div 
                key={notification.id}
                className="flex items-center justify-between p-4 border border-gray-200 rounded-xl hover:bg-gray-50 transition-colors"
              >
                <div className="flex items-center space-x-4">
                  <div className={`w-3 h-3 rounded-full ${
                    notification.isActive ? 'bg-green-500' : 'bg-gray-300'
                  }`}></div>
                  <div>
                    <h4 className="font-medium text-gray-900">{notification.title}</h4>
                    <p className="text-sm text-gray-600">{notification.message}</p>
                    <p className="text-xs text-gray-500">
                      {notification.recurring ? (
                        `${notification.recurring.frequency === 'daily' ? '–ï–∂–µ–¥–Ω–µ–≤–Ω–æ' : '–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ'} –≤ ${notification.recurring.time}`
                      ) : (
                        new Date(notification.scheduledFor).toLocaleString('ru-RU')
                      )}
                    </p>
                  </div>
                </div>
                <button
                  onClick={() => removeNotification(notification.id)}
                  className="p-2 text-red-600 hover:bg-red-50 rounded-lg transition-colors"
                >
                  <XMarkIcon className="h-5 w-5" />
                </button>
              </div>
            ))}
          </div>
        )}

        {notifications.length === 0 && !showAddForm && (
          <div className="text-center py-8 text-gray-500">
            <CalendarDaysIcon className="h-12 w-12 mx-auto mb-3 opacity-50" />
            <p>–ù–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</p>
            <p className="text-sm">–ù–∞–∂–º–∏—Ç–µ "–î–æ–±–∞–≤–∏—Ç—å" —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ</p>
          </div>
        )}
      </div>
    </div>
  );
} 