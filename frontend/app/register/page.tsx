'use client';

import { useState } from 'react';
import { useRouter } from 'next/navigation';
import Link from 'next/link';
import { useForm } from 'react-hook-form';
import { authAPI, tokenUtils } from '@/lib/api';
import { validationUtils } from '@/lib/utils';

interface RegisterForm {
  email: string;
  password: string;
  confirmPassword: string;
  full_name: string;
}

export default function RegisterPage() {
  const router = useRouter();
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  const {
    register,
    handleSubmit,
    watch,
    formState: { errors },
  } = useForm<RegisterForm>();

  const password = watch('password');

  const onSubmit = async (data: RegisterForm) => {
    setIsLoading(true);
    setError(null);

    try {
      const response = await authAPI.register(data.email, data.password, data.full_name);
      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ª–æ–≥–∏–Ω–∏–º –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
      const loginResponse = await authAPI.login(data.email, data.password);
      tokenUtils.setToken(loginResponse.access_token);
      router.push('/');
    } catch (err: any) {
      setError(err.response?.data?.detail || '–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏');
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="min-h-screen flex">
      {/* Left side - Form */}
      <div className="flex-1 flex flex-col justify-center py-12 px-4 sm:px-6 lg:px-20 xl:px-24">
        <div className="mx-auto w-full max-w-sm lg:w-96">
          <div>
            <h2 className="mt-6 text-3xl font-bold text-gray-900">
              –°–æ–∑–¥–∞–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞
            </h2>
            <p className="mt-2 text-sm text-gray-600">
              –ò–ª–∏{' '}
              <Link
                href="/login"
                className="font-medium text-primary-600 hover:text-primary-500"
              >
                –≤–æ–π–¥–∏—Ç–µ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∞–∫–∫–∞—É–Ω—Ç
              </Link>
            </p>
          </div>

          <div className="mt-8">
            <form className="space-y-6" onSubmit={handleSubmit(onSubmit)}>
              {error && (
                <div className="bg-red-50 border border-red-200 text-red-600 px-4 py-3 rounded-lg">
                  {error}
                </div>
              )}

              <div>
                <label htmlFor="full_name" className="sr-only">
                  –ü–æ–ª–Ω–æ–µ –∏–º—è
                </label>
                <input
                  {...register('full_name', {
                    required: '–ò–º—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ',
                    minLength: {
                      value: 2,
                      message: '–ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞'
                    }
                  })}
                  type="text"
                  autoComplete="name"
                  className="input"
                  placeholder="–ü–æ–ª–Ω–æ–µ –∏–º—è"
                />
                {errors.full_name && (
                  <p className="mt-1 text-sm text-red-600">{errors.full_name.message}</p>
                )}
              </div>

              <div>
                <label htmlFor="email" className="sr-only">
                  Email –∞–¥—Ä–µ—Å
                </label>
                <input
                  {...register('email', {
                    required: 'Email –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω',
                    validate: (value) =>
                      validationUtils.isEmail(value) || '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email',
                  })}
                  type="email"
                  autoComplete="email"
                  className="input"
                  placeholder="Email –∞–¥—Ä–µ—Å"
                />
                {errors.email && (
                  <p className="mt-1 text-sm text-red-600">{errors.email.message}</p>
                )}
              </div>

              <div>
                <label htmlFor="password" className="sr-only">
                  –ü–∞—Ä–æ–ª—å
                </label>
                <input
                  {...register('password', {
                    required: '–ü–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω',
                    validate: (value) =>
                      validationUtils.isStrongPassword(value) || '–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 8 —Å–∏–º–≤–æ–ª–æ–≤',
                  })}
                  type="password"
                  autoComplete="new-password"
                  className="input"
                  placeholder="–ü–∞—Ä–æ–ª—å"
                />
                {errors.password && (
                  <p className="mt-1 text-sm text-red-600">{errors.password.message}</p>
                )}
              </div>

              <div>
                <label htmlFor="confirmPassword" className="sr-only">
                  –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è
                </label>
                <input
                  {...register('confirmPassword', {
                    required: '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ',
                    validate: (value) =>
                      value === password || '–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç',
                  })}
                  type="password"
                  autoComplete="new-password"
                  className="input"
                  placeholder="–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è"
                />
                {errors.confirmPassword && (
                  <p className="mt-1 text-sm text-red-600">{errors.confirmPassword.message}</p>
                )}
              </div>

              <div>
                <button
                  type="submit"
                  disabled={isLoading}
                  className="w-full btn btn-primary"
                >
                  {isLoading ? '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è...' : '–°–æ–∑–¥–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç'}
                </button>
              </div>
            </form>


          </div>
        </div>
      </div>

      {/* Right side - Branding */}
      <div className="hidden lg:block relative w-0 flex-1 bg-gradient-to-br from-primary-600 to-primary-800">
        <div className="absolute inset-0 flex items-center justify-center p-12">
          <div className="text-center text-white">
            <h1 className="text-4xl font-bold mb-4">
              –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!
            </h1>
            <p className="text-xl opacity-90 mb-8">
              –ù–∞—á–Ω–∏—Ç–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ —É–ø—Ä–∞–≤–ª—è—Ç—å —Å–≤–æ–∏–º–∏ —É—á–µ–±–Ω—ã–º–∏ –∑–∞–¥–∞—á–∞–º–∏ —É–∂–µ —Å–µ–≥–æ–¥–Ω—è
            </p>
            <div className="grid grid-cols-1 gap-4 text-left max-w-md">
              <div className="flex items-center space-x-3">
                <div className="w-8 h-8 bg-white bg-opacity-20 rounded-full flex items-center justify-center">
                  <span className="text-white font-bold">üéØ</span>
                </div>
                <span>–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–¥–∞—á –≤ –æ–¥–Ω–æ–º –º–µ—Å—Ç–µ</span>
              </div>
              <div className="flex items-center space-x-3">
                <div className="w-8 h-8 bg-white bg-opacity-20 rounded-full flex items-center justify-center">
                  <span className="text-white font-bold">‚è∞</span>
                </div>
                <span>–ù–∏–∫–æ–≥–¥–∞ –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ –¥–µ–¥–ª–∞–π–Ω</span>
              </div>
              <div className="flex items-center space-x-3">
                <div className="w-8 h-8 bg-white bg-opacity-20 rounded-full flex items-center justify-center">
                  <span className="text-white font-bold">üìà</span>
                </div>
                <span>–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞</span>
              </div>
              <div className="flex items-center space-x-3">
                <div className="w-8 h-8 bg-white bg-opacity-20 rounded-full flex items-center justify-center">
                  <span className="text-white font-bold">üí™</span>
                </div>
                <span>–ú–æ—Ç–∏–≤–∞—Ü–∏—è –∫ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—é —Ü–µ–ª–µ–π</span>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
} 